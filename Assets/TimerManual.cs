using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TimerManual : MonoBehaviour
{
    public SpriteRenderer MyCat;
    “ест лас обьект;
    void „тоЌибудь—лучилось()
    {
        //«адержка перед воспроизведением метода баз параметров. ћетод в строку, задержку в float.
        Invoke("asd", 1f);

        //старт корутины
        StartCoroutine(ћетод— учей–азличных«адержок¬нутри());
        IEnumerator ћетод— учей–азличных«адержок¬нутри()
        {
            yield return new WaitForSeconds(1f);//задержка в секундах float
            „тоЌибудь—лучилось();
        }

        //“зменить цвет/прозрачность объекта
        MyCat = GetComponent<SpriteRenderer>();
        MyCat.color = new Color(1f, 1f, 1f, 1f);

        //ѕодписка на делигат экземпл€ра класса
        обьект.делигат += ћетод¬нешний; //метод с такимиже параметрами как и в делигате     //экземпл€р делигата
        обьект.делигат += ћетод¬нешний; //в подписке может находитьс€ много методов         //экземпл€р делигата
        обьект.Atacka += ћетод¬нешний;                                                      //событие (собити€ лучше дл€ делигатов)

        /*
        обьект.делигат(1f); //Ётот код —–јЅќ“ј≈“. Ќам такого не нужно. 
        обьект.Atacka(1f);  //Ётот код Ќ≈—–јЅќ“ј≈“. Ќам это и нужно. Ёвенты блокируют попытку использовани€ делигаты бессмысленно.
        Ќам нужно что бы всегда вызывалс€ метод при вызове делигата. ћы же не хотим обратно отсылать данные которые мы получили от делигата этому же делигату. 
        */
    }
    void ћетод¬нешний(float a)
    {


    }
}



//–аньше здесь было много кода пытающегос€ воссоздать таймер задержки дл€ событий.
//Ќо потом € пон€л что это не целесообразно тратить как моЄ врем€ на создание этого кода,
//так и делать игру менее оптимизированной. ёнити уже предлагает все возможные решени€
//ѕочти всех проблем что могут возникнуть, тем самым избавл€€ програмиста от использовани€
//самописных методов. 


public class “ест лас
{
    public delegate void AtacleDeligate(float yron);
    private void  акойтоћетод(float yronM) { }
    public event AtacleDeligate Atacka; //создание типа данных (делигата)
    public AtacleDeligate делигат;      //создание имени делигата
    public void metod()
    {
        делигат.Invoke(6);      //¬ызо делигата (скорее всего с задержкой)
        делигат =  акойтоћетод; //€ не уверен в этом, но € знаю про наличие такой возможности
        делигат?.Invoke(0.100f);//¬ызов делигата без ошибок

    }
}